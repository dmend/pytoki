import enum

import cffi


# PKCS #11 constants
CK_TRUE = 0x01
CK_FALSE = 0x00

CK_UNAVAILABLE_INFORMATION = 0xFFFFFFFF
CK_EFFECTIVELY_INFINITE = 0x00

CK_INVALID_HANDLE = 0x00


class CK_NOTIFICATION(enum.Enum):
    CKN_SURRENDER = 0x00
    CKN_OTP_CHANGED = 0x01


class CK_SLOT_FLAGS(enum.Flag):
    CKF_TOKEN_PRESENT = 0x00000001
    CKF_REMOVABLE_DEVICE = 0x00000002
    CKF_HW_SLOT = 0x00000004


class CK_TOKEN_FLAGS(enum.Flag):
    CKF_RNG = 0x00000001
    CKF_WRITE_PROTECTED = 0x00000002
    CKF_LOGIN_REQUIRED = 0x00000004
    CKF_USER_PIN_INITIALIZED = 0x00000008
    CKF_RESTORE_KEY_NOT_NEEDED = 0x00000020
    CKF_CLOCK_ON_TOKEN = 0x00000040
    CKF_PROTECTED_AUTHENTICATION_PATH = 0x00000100
    CKF_DUAL_CRYPTO_OPERATIONS = 0x00000200
    CKF_TOKEN_INITIALIZED = 0x00000400
    CKF_SECONDARY_AUTHENTICATION = 0x00000800
    CKF_USER_PIN_COUNT_LOW = 0x00010000
    CKF_USER_PIN_FINAL_TRY = 0x00020000
    CKF_USER_PIN_LOCKED = 0x00040000
    CKF_USER_PIN_TO_BE_CHANGED = 0x00080000
    CKF_SO_PIN_COUNT_LOW = 0x00100000
    CKF_SO_PIN_FINAL_TRY = 0x00200000
    CKF_SO_PIN_LOCKED = 0x00400000
    CKF_SO_PIN_TO_BE_CHANGED = 0x00800000
    CKF_ERROR_STATE = 0x01000000


class CK_USER_TYPE(enum.Enum):
    CKU_SO = 0
    CKU_USER = 1
    CKU_CONTEXT_SPECIFIC = 2


class CK_STATE(enum.Enum):
    CKS_RO_PUBLIC_SESSION = 0
    CKS_RO_USER_FUNCTIONS = 1
    CKS_RW_PUBLIC_SESSION = 2
    CKS_RW_USER_FUNCTIONS = 3
    CKS_RW_SO_FUNCTIONS = 4


def _build_ffi():
    ffi = cffi.FFI()
    ffi.cdef(
        """
typedef unsigned char CK_BYTE;
typedef CK_BYTE CK_CHAR;
typedef CK_BYTE CK_UTF8CHAR;
typedef CK_BYTE CK_BBOOL;
typedef unsigned long int CK_ULONG;
typedef long int CK_LONG;
typedef CK_ULONG CK_FLAGS;

typedef CK_BYTE * CK_BYTE_PTR;
typedef CK_CHAR * CK_CHAR_PTR;
typedef CK_UTF8CHAR * CK_UTF8CHAR_PTR;
typedef CK_ULONG * CK_ULONG_PTR;
typedef void * CK_VOID_PTR;
typedef CK_VOID_PTR * CK_VOID_PTR_PTR;

typedef CK_ULONG CK_RV;
"""
    )
    ffi.cdef(
        """
CK_RV C_Initialize(CK_VOID_PTR pInitArgs);
CK_RV C_Finalize(CK_VOID_PTR  Reserved);
"""
    )
    return ffi


class PKCS11:
    pass
